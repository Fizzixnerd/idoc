=idoc User Guide

@prerex
---
/None{Someone wanted to see what this looked like, so it's here.  Normally you can just leave the `prerex` block out when there are none.}
---

@introduction
---
idoc is a language and a program.  The language is what was used to
write this document.  The program is what rendered it (in both
$\LaTeX$ and HTML5).  It has a number of features that are not found
in other humane markup languages.  The most critical of these is
support for allowing prerequisite resolution, though this is
technically implemented by a static checker after parsing.  idoc was
originally based on asciidoc, but has since diverged significantly.
---

==Goals

[type=tip]
@admonition
#Get the Source!
---
You will probably want to examine the source for this document along
with the rendered content.  It can be found
<<http://www.independentlearning.science/source.idoc>>{here}.
---
[[#source-tip]]

idoc was created because no other existing markup language had the
properties we needed for the website.  We describe these properties
and how the extant humane markup languages failed to have them.

:Prerequisite resolution:: This is the big one.  The website is
designed around the idea of prerequisites, and so prerequisite
resolution is a necessary thing idoc has to be able to do.  It would
have been _possible_ to add this to Asciidoc, but not fun.  It would
have been _impossible_ to add this to Markdown.
:Typed Blocks:: A "strongly-typed" block is where one declares the
purpose of a section of text explicitly.  idoc uses the strongly-typed
blocks to enable a bunch of cool features.  One of those features is
being able to take a doc (or a bunch of docs) and take all the
theorems, lemmas, propositions, corollaries, definitions and examples,
stick them all in a new document and basically generate a useful
review sheet for you automatically.  It also means that you don't
manually have to describe the formatting of these things; idoc takes
care of that for you.
:Extensible Blocks:: On the other hand, having "extensible" blocks
means that we can add new types of blocks -- and new features to them
-- as needed.  For example, if idoc is use a lot by computer science
students, it might be necessary to add a block that allows you to
download example code.  It might even be cool to add that
functionality to the already existing `code` blocks.  These kind of
additions are _impossible_ in Markdown, _difficult_ in Asciidoc, and
_easy_ in idoc.
:Easy to Learn by Example:: While Asciidoc is a powerful markup
language, its syntax can be somewhat irregular.  It uses different
types of delimiters to denote different types of blocks.  Unless you
have memorized what each style of delimiter means, this makes the
markup hard to understand as a beginner.  idoc was designed to be more
regular -- you should be able to figure out what is going on given
just the source and the output.  More importantly, you should be able
to make _changes_ to the source confidently, based on what you already
see in it.  Most edits to sites like Wikipedia are small ones; users
like that don't want to learn the entirety of a markup language.  They
just want to get in, make their edit, and get out.  Hopefully idoc
allows them to do this.
:Power with Limitations:: Asciidoc and Markdown allow you to insert
inline HTML into your documents.  While this sounds nice, it means
that it's unsuitable for content on a shared website.  This is because
Javascript can be embedded in HTML, and that would mean we were
letting people write and run untrusted programs on our user's
computers.  This is not acceptable.  Such things also break the
abstraction layer the markup languages provide, and makes it much more
difficult to properly format the result of the markup language
automatically.  We prefer providing the features users want directly,
instead of having them rely on such "escape hatches".
:Haskell Implementation:: We are using the
<<https://www.haskell.org>>{Haskell programming language} to make the
site because there is simply no better language out there.  There does
not exist (at the time of writing) a good implementation of Asciidoc
for Haskell, and since Markdown is unsuitable for our purposes it did
not matter _how_ good the implementation of it was.  Since we would
have to write our own implementation of another markup language
anyway, it was not a major extra investment to write an implementation
of a new one instead.

Hopefully you can forgive us for forcing you to use an untested
language!

==Features

===Basics

idoc is a _humane_ markup language, which basically means it doesn't
suck to write in it.  For example, this is a *paragraph*.  You just
type like normal.  They are separated by a blank line, as is every
other *complex content* in idoc.  Complex content is one of a
paragraph, a list, or a block.

This is now a new paragraph.  I can *italicize* text by surrounding it
with with _underscores_ (`\_`) and *bold* it with *asterisks* (`\*`).
I can make it *monospace* (like "computer code") using `backticks`
(`\``).

Every idoc document must have a *title*, which is the first line of
the document and looks like this: `= Title`.  The space between the
`=` and the title text is important.  To make new *sections*, type `==
Section Name`.  Note that the section title must be separated from the
previous content by a newline.  For example,

[lang=idoc]
@code
---
I am a paragraph!  Hear me roar!

==New Section!

Another paragraph.  RAAAAAAAAAAAWR!
---

is correct, while

[lang=idoc]
@code
---
I am a paragraph!  Hear me roar!
==New Section!

Another paragraph.  RAAAAAAAAAAAWR!
---

would not display what you want correctly.  Subsections are the same
deal: use `=== Subsection Name`.

Any line that begins with `//` denotes a comment.  They will be
rendered as comments upon translation, but will not be displayed in
the final document.  These are not yet implemented, but will be soon.

// This is a comment line.  It will not be rendered.  Block
// comments are not supported because they are a pain.

Nearly everything in idoc can be given an identifier (or *ID*) using
the syntax `[[#id-name]]`.  This immediately follows the thing you
wish to identify.

[lang=idoc]
@code
---
Nearly everything in idoc can be given an identifier using the syntax
`[[#id-name]]`.  This immediately follows the thing you wish to
identify.
---

To see how to refer to IDs and link to them, check out the
<<#sec-links>>{section on links}.

===Lists

Lists are of fundamental importance when constructing rich documents.
However, currently `idoc` does not recognize complex content inside
lists, though this is subject to change.  This means you cannot nest
lists.  You may only write a single paragraph.  We support unordered
lists, ordered lists and labelled (description) lists.

-This is an unordered list.  It can contain paragraph contents.
-It will look like bullet points in the final render.
-Third main item.

[lang=idoc]
@code
---
-This is an unordered list.  It can contain paragraph contents.
-It will look like bullet points in the final render.
-Third main item.
---

.This is a numbered list.
.This is the second guy.
.And so on...

[lang=idoc]
@code
---
.This is a numbered list.
.This is the second guy.
.And so on...
---

:First Item:: This is a list where the items have labels.
:Second Item:: Another item.
:And So On:: ...

[lang=idoc]
@code
---
:First Item:: This is a list where the items have labels.
:Second Item:: Another item.
:And So On:: ...
---

==Blocks

*Blocks* are a fundamental construct in idoc.  They all look the same,
basically.  They begin with `@ blocktype` on a line by itself,
separated by the previous content by a blank line.  A block can also
have a title, which comes _after_ the declaration of block type; it
looks like `# Block Title`.  Titles are optional, and a default title
will be chosen based on the block type if not included.  Next, we have
the attribute list, which I'll talk more on below.  Basically it looks
like `[key=value,key-no-value,key2=value-2,...]`, and gives a list
of *attributes* and optionally their *values*.  Finally, we have the
actual block itself, which is enclosed by the delimiters `---`.  The
syntax inside the block is block dependent, and we'll explore them all
below.

===Math

Inline math is done just using normal $\LaTeX$ syntax by doing enclosing
text in dollar signs. $f(x) = \exp (-x^2)$.  Display mode is done by
using a `math` block, like so:

@math
#Look Ma', I Have Equations!
---
f(x) = \int_x^\infty g(t) \mathrm{d}t
---
[[#eqn-f-defn]]

[lang=idoc]
@code
---
 @math
 #Look Ma', I Have Equations!
 ---
 f(x) = \int_x^\infty g(t) \mathrm{d}t
 ---
 [[#eqn-f-defn]]
---

Note that that $d$ will not be upright as it should be.  We'll fix
that later.  (Fixed it!  Use `\mathrm{d}`!)  Also note that we added
an _ID_ to the equation.  IDs can be added to many things.  They
always appear immediately following the thing they identify.

There is also a more specialized `eqnarray` block, which numbers
equations.  Note however that _unlike_ the $\LaTeX$ eqnarray, you do
not put a linebreak (`\\ `) at the end of each line.  The ampersands
(`&`) tell MathJax where to align line to.  So, for example, the
equations below have a "left side", an "equals sign" in the middle,
and a "right side".

@eqnarray
---
f(x) &=& 2x + 3
g(y) &=& y^2
\implies (f \circ g) (x) &=& 2 x^2 + 3
---

[lang=idoc]
@code
---
 @eqnarray
 ---
 f(x) &=& 2x + 3
 g(y) &=& y^2
 \implies (f \circ g) (x) &=& 2 x^2 + 3
 ---
---

Note that we can use the standard `\label{}` macro within the `math`
or `eqnarray` environments to assign IDs to individual equations.
Then we can use `\ref{}` or `<<#id-label>>` syntax to refer to them:

@eqnarray
---
\label{important-equation} y &=& mx + b
---

[lang=idoc]
@code
---
 @eqnarray
 ---
 \label{important-equation} y &=& mx + b
 ---
---

Refer to the _important equation_ $\ref{important-equation}$.  Refer
to <<#important-equation>>{the important equation}.  If you want to
prevent an equation from being numbered, use `\nonumber` as usual.

@eqnarray
---
R_{\mu \nu} - \frac{1}{2} R g_{\mu \nu} + \Lambda g_{\mu \nu} &=& \frac{8 \pi G}{c^4} T_{\mu \nu} \nonumber
---

[lang=idoc]
@code
---
 @eqnarray
 ---
 R_{\mu \nu} - \frac{1}{2} R g_{\mu \nu} + \Lambda g_{\mu \nu} &=& \frac{8 \pi G}{c^4} T_{\mu \nu} \nonumber
 ---
---

// FIXME: you can't have in the `axiom` below a blank line between the
// `eqnarray` ender and the `axiom` ender.

@axiom
---
An axiom looks like this.

@eqnarray
---
x \cdot y = y \cdot x
---
---

[lang=idoc]
@code
---
 @axiom
 ---
 An axiom looks like this.
 
 @eqnarray
 ---
 x \cdot y = y \cdot x
 ---
 ---
---

[term=number]
@definition
---
a *number* is an element of an field.
---
[[#def-number]]

[lang=idoc]
@code
---
 [term=number]
 @definition
 ---
 a *number* is an element of an field.
 ---
 [[#def-number]]
---

@ theorem
---

@eqnarray
---
(x + y)^2 = x^2 + 2 xy + y^2.
---

***

Use geometry.
---
[[#thm-foil]]

[lang=idoc]
@code
---
 @theorem
 ---

 @eqnarray
 ---
 (x + y)^2 = x^2 + 2 xy + y^2.
 ---

 ***

 Use geometry.
 ---
 [[#thm-foil]]
---

@lemma
#Easy Lemma
---
This is a lemma.  It's pretty easy to prove.

For $n > 2$ there exists no integer solutions to the equation:

@ eqnarray
---
x^n + y^n = z^n
---

***

It's trivial.
---
[[#lem-easy-lemma]]

@code
---
 @lemma
 #Easy Lemma
 ---
 This is a lemma.  It's pretty easy to prove.
 
 For $n > 2$ there exists no integer solutions to the equation
 
 @eqnarray
 ---
 x^n + y^n = z^n
 ---
 
 ***

 It's trivial.
 ---
 [[#lem-easy-lemma]]
---

@proposition
---
Hey, um, do you want to go out with me next Saturday?
---

[lang=idoc]
@code
---
 @proposition
 ---
 Hey, um, do you want to go out with me next Saturday?
 ---
---

@corollary
---
If $x, y > 2$ are prime then $x + y$ is not prime.
---

[lang=idoc]
@code
---
 @corollary
 ---
 If $x, y > 2$ are prime then $x + y$ is not prime.
 ---
---

@conjecture
---
The product of any two primes is also prime.
---

[lang=idoc]
@code
---
 @conjecture
 ---
 The product of any two primes is also prime.
 ---
---

[theorem=#lem-easy-lemma]
@proof
---
Just intuit.
---

[lang=idoc]
@code
---
 [theorem=#lem-easy-lemma]
 @proof
 ---
 Just intuit.
 ---
---

===Emphasis Blocks

The following blocks are designed to emphasize certain things within
the text.  The first is the `quote` block, used for quotations.

[author=Albert Einstein]
@quote
#A Quote from the "Great One".
---
The internet is the most important invention since gravity.
---
[[#q-einstein]]

[lang=idoc]
@code
---
 [author=Albert Einstein]
 @quote
 #A Quote from the "Great One".
 ---
 The internet is the most important invention since gravity.
 ---
 [[#q-einstein]]
---

Notice in the `quote` block we added an author attribution above as an
_attribute_ of the quote block contents.  *Attribute lists* always
come _just_ before the thing they modify.  In this case, we are
modifying the "body" of the `quote` element, so it comes just before
the body.

The next type of block is the `sidenote`.  It is used to separate a
paragraph from the main text, perhaps because it is important.  Or
perhaps it's unimportant... but then why is it there at all!?

@sidenote
#Please be Aware:
---
This content will be rendered off to the side of the document.  You are
allowed any amount of complex content here.  An equation: $F =
\frac{dp}{dt}$.
---

