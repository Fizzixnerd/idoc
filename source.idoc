= idoc User Guide

@ prerex
---
/None{Someone wanted to see what this looked like, so it's here.  Normally you can just leave the `prerex` block out when there are none.}
---

@ introduction
---
idoc is a language and a program.  The language is what was used to
write this document.  The program is what rendered it (in both LaTeX
and HTML).  It has a number of features that are not found in other
humane markup languages.  The most critical of these is support for
allowing prerequisite resolution, though this is technically
implemented by a static checker after parsing.  idoc was originally
based on asciidoc, but has since diverged significantly.
---

== Goals

@ admonition
# Get the Source!
[type="tip"]
---
You will probably want to examine the source for this document along
with the rendered content.  It can be found
<<http://www.independentlearning.science/source.idoc>>{here}.
---
[[#source-tip]]

idoc was created because no other existing markup language had the
properties we needed for the website.  We describe these properties
and how the extant humane markup languages failed to have them.

: Prerequisite resolution:: This is the big one.  The website is
designed around the idea of prerequisites, and so prerequisite
resolution is a necessary thing idoc has to be able to do.  It would
have been _possible_ to add this to Asciidoc, but not fun.  It would
have been _impossible_ to add this to Markdown.
: Typed Blocks:: A "strongly-typed" block is where one declares the
purpose of a section of text explicitly.  idoc uses the strongly-typed
blocks to enable a bunch of cool features.  One of those features is
being able to take a doc (or a bunch of docs) and take all the
theorems, lemmas, propositions, corollaries, definitions and examples,
stick them all in a new document and basically generate a useful
review sheet for you automatically.  It also means that you don't
manually have to describe the formatting of these things; idoc takes
care of that for you.
: Extensible Blocks:: On the other hand, having "extensible" blocks
means that we can add new types of blocks -- and new features to them
-- as needed.  For example, if idoc is use a lot by computer science
students, it might be necessary to add a block that allows you to
download example code.  It might even be cool to add that
functionality to the already existing `code` blocks.  These kind of
additions are _impossible_ in Markdown, _difficult_ in Asciidoc, and
_easy_ in idoc.
: Easy to Learn by Example:: While Asciidoc is a powerful markup
language, its syntax can be somewhat irregular.  It uses different
types of delimiters to denote different types of blocks.  Unless you
have memorized what each style of delimiter means, this makes the
markup hard to understand as a beginner.  idoc was designed to be more
regular -- you should be able to figure out what is going on given
just the source and the output.  More importantly, you should be able
to make _changes_ to the source confidently, based on what you already
see in it.  Most edits to sites like Wikipedia are small ones; users
like that don't want to learn the entirety of a markup language.  They
just want to get in, make their edit, and get out.  Hopefully idoc
allows them to do this
: Power with Limitations:: Asciidoc and Markdown allow you to insert
inline HTML into your documents.  While this sounds nice, it means
that it's unsuitable for content on a shared website.  This is because
Javascript can be embedded in HTML, and that would mean we were
letting people write and run untrusted programs on our user's
computers.  This is not acceptable.  Such things also break the
abstraction layer the markup languages provide, and makes it much more
difficult to properly format the result of the markup language
automatically.  We prefer providing the features users want directly,
instead of having them rely on such "escape hatches".
: Haskell Implementation:: We are using the
<<https://www.haskell.org>>{Haskell programming language} to make the
site because there is simply no better language out there.  There does
not exist (at the time of writing) a good implementation of Asciidoc
for Haskell, and since Markdown is unsuitable for our purposes it did
not matter _how_ good the implementation of it was.  Since we would
have to write our own implementation of another markup language
anyway, it was not a major extra investment to write an implementation
of a new one instead.

=== Paragraphs

This is a paragraph.  You just type like normal.  They are separated
by a blank line.  For example:

This is now a new paragraph.  I can italicize text with _underscores_
(`\_`) and bold it with *asterisks* (`\*`).  I can make it `monospace`
using backticks (`\``).  I will end this paragraph with another blank
line.

=== Comments

Any line that begins with `//` denotes a comment.  They will be
rendered as comments upon translation, but will not be displayed in
the final document.

// This is a comment line.  It will not be rendered.  Block
// comments are not supported because they are a pain.

=== Lists

Lists are sometimes useful in documents.  Currently `idoc` does not
recognize complex content inside lists, though this is subject to
change.  This means you cannot nest lists.  You may only write a
single paragraph.  We support unordered lists, ordered lists and
labelled (description) lists.


- This is an unordered list.  It can contain paragraph contents.
- It will look like bullet points in the final render.
- Third main item.

. This is a numbered list.
. This is the second guy.
. And so on...

: First Item:: This is a list where the items have labels.
: Second Item:: Another item.
: And So On:: ...

=== Math

Inline math is done just using normal latex syntax by doing enclosing
text in dollar signs. $f(x) = \exp (-x^2)$.  Display mode is done by
using a _math block_, like so:

@ math
# Look Ma', I Have Equations!
---
f(x) = \int_x^\infty g(t) dt
---
[[#eqn:f-defn]]

@ code
[lang="idoc"]
---
 @ math
 # Look Ma', I Have Equations!
 ---
 f(x) = \int_x^\infty g(t) dt
 ---
 [[#eqn:f-defn]]
---

Note that that $d$ will not be upright as it should be.  We'll fix
that later.  Also note that we added an _ID_ to the equation.  IDs can
be added to many things.  They always appear immediately following the
thing they identify.

=== Blocks

We can do other types of blocks beside math blocks.  They all look the
same, basically.  A block can also have a title, which comes _after_
the declaration of block type.


@ quote
# A Blockquote from the "Great One".
[author="Albert Einstein"]
---
The internet is the most important invention since gravity.
---
[[#q:einstein]]

@ code
[lang="idoc"]
---
 @ quote
 # A Blockquote from the "Great One".
 [author="Albert Einstein"]
 ---
 The internet is the most important invention since gravity.
 ---
 [[#q:einstein]]
---

Notice in the quoteblock we added an author attribution above as an
_attribute_ of the quote block contents.  Attribute lists always come
_just_ before the thing they modify.  In this case, we are modifying
the "body" of the `@ quote` element, so it comes just before the body.

@ sidenote
# Please be Aware:
---
This content will be rendered off to the side of the document.  You are
allowed any amount of complex content here.  An equation: $F =
\frac{dp}{dt}$.
---

@ code
[lang="idoc"]
---
 @ sidenote
 # Please be Aware:
 ---
 This content will be rendered off to the side of the document.  You are
 allowed any amount of complex content here.  An equation: $F =
 \frac{dp}{dt}$.
 ---
---

@ admonition
# This is a Warning Block
[type="warning"]
---
This will show a little warning symbol next to it.
---
[[#warning-admonition]]

@ code
[lang="idoc"]
---
 @ admonition
 # This is a Warning Block
 [type="warning"]
 ---
 This will show a little warning symbol next to it.
 ---
 [[#warning-admonition]]
---

@ admonition
# This is an Info Block
[type="info"]
---
This will show a little info symbol next to it.
---
[[#info-admonition]]

etc...

@ admonition
# This is a Caution Block
[type="caution"]
---
This will show a little caution symbol next to it.
---
[[#caution-admonition]]

@ admonition
# This is a Tip Block
[type="tip"]
---
This will show a little lightbulb symbol next to it.
---
[[#tip-admonition]]

If you're worried about all the wasted space in the HTML output, don't
be!  It's only wasted because I didn't put text between each block.
You would not normally have $1 + 4$ of these things in a row.

lets try a footnote! footnote:{hello.}[[#my-footnote]]

@ connection
# A connection
---
@ prerex
# Connection Prerex
---
/Basics/Logic{Mostly only _first-order_ logic will be used, but some _second-order_ stuff is important for stuff later on, so we put it here.}
/Basics/Sex{Oh, I think you know. ;)}
---

A `connection` is useful when you have content connected to the main text
but which isn't super necessary, or requires more advanced techniques
than the rest of the text.  This is because connections are allowed to have
their own prerequisites, in addition to the main doc's prereqs.

@ admonition
# Rendering
[type="info"]
---
If you're viewing this full-screen on a computer, you'll notice that
unlike the other blocks we've seen (with the exception of the math
block), connections are rendered across the full screen.  In general, you
should _never_ rely on the position of something relative to something
else, or its size.  This is because idoc has been designed to have
pluggable themes, and the web renderer creates _responsive_ html that
is free to reorganize content to better match the devices size.
Therefore, whenever you refer to something, please please please use
an ID.
---
[[#rendering-info]]

Connections are for when you want to connect with an outside idea, but
don't want to have this interesting connection create new
prerequisites for your doc.  For example, in the article
<</Math/Topology/Homeomorphism#>>{on topology}, we might want to talk
about how is difficult to prove two things are _not_ homeomorphic, and
how the fundamental group is useful because of its status as a
topological invariant.  However, we don't know if the readers actually
know group theory.  This would be the time you would use a connection --
group theory is not needed to understand homeomorphisms, but it _is_
needed to understand this small aside.

When the site is complete, connections will start out open or closed
depending on if the reader has the necessary prereqs or not.
---
[[#my-connection]]


=== Links

Links look like <<https://www.google.com>>{this}.  Note that this is
an "outlink" -- a link to an external site -- and so wouldn't actually
be allowed in the main body of the document like this.  We can also
link to <<#Introduction>>{headings} in the current document, or
<<#eqn:f-defn>>{anything else} which has an ID.  And we can even link
to headings in <</Physics/Classical/Mechanics/Newtonian#Second Law>>{other documents},
as long as they are a prerequisite of this one.  The same applies to
ID'd items in those docs, including this paragraph. 

=== YouTube

We can embed YouTube videos if we think they are important.  Please do
not abuse this feature.

@ youtube
---
<<FdU8oqCbvzo>>
---

=== Images

We can embed important images too.

@ image
---
<<http://www.independentlearning.science/uusBbd5.jpg>>
---

== Conclusion

That's about it for the basic syntax.  We can fix the rest later.
